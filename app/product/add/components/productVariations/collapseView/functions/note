import { uid } from "uid";

const compareValuesArrays = (arr1, arr2) => {
  if (arr1.length !== arr2.length) return false;
  for (let i = 0; i < arr1.length; i++) {
    for (const key in arr1[i]) {
      if (arr1[i][key] !== arr2[i][key]) {
        return false;
      }
    }
  }
  return true;
};
export function generateQualities(prev, attributes) {
  const qualities = []; // Start with the existing data

  function generateCombinations(currentCombination, depth) {
    if (depth === attributes.length) {
      // Check if the combination already exists in `prev`
      const existingQuality = prev.find((quality) => {
       

        return quality.values.some((item) =>
          currentCombination.some((itemc) => itemc.id === item.id)
        );
      });
      console.log(existingQuality, "existingQualityexistingQuality");
      if (existingQuality) {
        qualities.push(existingQuality);
      } else {
        qualities.push({
          values: currentCombination,
          quantity: 0,
          price: 0,
          image: [],
          continue_out_stock: false,
          compare_to_price: 0,
          Cost_Per_Item: 0,
          profit: 0,
          margin: 0,
          sku: 0,
          color: "",
          barcode: "",
          weight: "",
          deleted: false,
          id: uid(), // Generate a new ID only for new combinations
        });
      }
      return;
    }

    // Continue generating combinations
    attributes[depth].values.forEach((value) => {
      console.log(value, "valuevaluevalue");
      const newCombination = currentCombination.slice();
      newCombination.push({
        key_en: attributes[depth].key_en,
        key_ar: attributes[depth].key_ar,
        value_en: value.value_en,
        value_ar: value.value_ar,
        color: value.color,
        id: value.id || uid(),
      });
      generateCombinations(newCombination, depth + 1);
    });
  }

  generateCombinations([], 0); // Start with an empty combination

  let AdjustArray = [];
  if (attributes?.length === 0) {
    AdjustArray = [];
    return;
  }
  AdjustArray = qualities
    .map((item, index) => {
      const founded = prev.find((itemg, idx) =>idx === index);
      console.log(founded, "foundedfoundedfounded");
      if (founded) {
        return {
          ...item,
          continue_out_stock: founded.continue_out_stock || false,
          price: founded.price,
          compare_to_price: founded.compare_to_price || 0,
          Cost_Per_Item: founded.Cost_Per_Item || 0,
          profit: founded.profit || 0,
          margin: founded.margin || 0,
          quantity: founded.quantity || 0,
          image: founded.image || [],
          sku: founded.sku || 0,
          color: founded.color || "",
          barcode: founded.barcode || "",
          weight: index,
          itemIndex: founded.barcode || "",
          deleted: founded.deleted || false,
        };
      }
      return item;
    })
    .map((item, idx) => ({ ...item, itemIndex: idx }));

  console.log(AdjustArray, "AdjustArrayAdjustArray");
  return AdjustArray;
}
